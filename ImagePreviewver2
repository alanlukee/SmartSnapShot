import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import java.util.ArrayList;

public class FullImagePreviewer extends JFrame {
    private JPanel imagePanel;
    private ArrayList<File> selectedFiles = new ArrayList<>();

    public FullImagePreviewer() {
        setTitle("Image Viewer");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);

        imagePanel = new JPanel();
        imagePanel.setLayout(new BoxLayout(imagePanel, BoxLayout.Y_AXIS)); // Vertical layout for images

        JScrollPane scrollPane = new JScrollPane(imagePanel);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        add(scrollPane, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton loadButton = new JButton("Load Images");
        loadButton.addActionListener(e -> loadImages());
        buttonPanel.add(loadButton);

        add(buttonPanel, BorderLayout.NORTH);
    }

    private void loadImages() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File folder = fileChooser.getSelectedFile();
            System.out.println("Selected folder: " + folder.getAbsolutePath());
            File[] files = folder.listFiles((dir, name) -> 
                name.toLowerCase().endsWith(".jpg") || name.toLowerCase().endsWith(".jpeg") || name.toLowerCase().endsWith(".png")
            );

            if (files != null && files.length > 0) {
                System.out.println("Found " + files.length + " image(s).");
                imagePanel.removeAll();
                selectedFiles.clear();
                for (File file : files) {
                    addImageToPanel(file);
                }
                imagePanel.revalidate();
                imagePanel.repaint();
            } else {
                JOptionPane.showMessageDialog(this, "No images found in the selected folder.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void addImageToPanel(File file) {
        try {
            BufferedImage bufferedImage = ImageIO.read(file);
            if (bufferedImage == null) {
                System.out.println("Failed to load image: " + file.getAbsolutePath());
                return;
            }

            // Scale the image to fit the full width of the window while maintaining aspect ratio
            int windowWidth = getWidth() - 50; // Leave some padding
            int scaledHeight = (bufferedImage.getHeight() * windowWidth) / bufferedImage.getWidth();
            Image scaledImage = bufferedImage.getScaledInstance(windowWidth, scaledHeight, Image.SCALE_SMOOTH);
            ImageIcon icon = new ImageIcon(scaledImage);

            JLabel imageLabel = new JLabel(icon);
            JCheckBox checkBox = new JCheckBox(file.getName());
            JPanel imageContainer = new JPanel();
            imageContainer.setLayout(new BoxLayout(imageContainer, BoxLayout.Y_AXIS));
            imageContainer.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Add some padding
            imageContainer.add(imageLabel);
            imageContainer.add(checkBox);

            checkBox.addActionListener(e -> {
                if (checkBox.isSelected()) {
                    selectedFiles.add(file);
                } else {
                    selectedFiles.remove(file);
                }
            });

            imagePanel.add(imageContainer);
        } catch (Exception ex) {
            System.err.println("Error loading image: " + file.getAbsolutePath());
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            FullImagePreviewer previewer = new FullImagePreviewer();
            previewer.setVisible(true);
        });
    }
}
